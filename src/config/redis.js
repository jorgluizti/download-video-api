// //  # Configura e exporta a conex√£o com o Redis

// // src/config/redis.js
// import Redis from 'ioredis';

// // L√™ a URL do Redis a partir das vari√°veis de ambiente (ideal para deploy)
// // Se n√£o encontrar, usa o localhost como padr√£o para desenvolvimento local.
// const redisUrl = process.env.REDIS_URL || 'redis://localhost:6379';

// const redisConnection = new Redis(redisUrl, {
//   maxRetriesPerRequest: null,
//   enableReadyCheck: false,
// });

// redisConnection.on('connect', () => console.log('üîå Conectado ao Redis'));
// redisConnection.on('error', (err) => console.error('‚ùå Erro de conex√£o com o Redis:', err));

// export default redisConnection;

// 1.0

// import Redis from 'ioredis';

// // 1. Tenta pegar a URL do ambiente.
// const redisUrl = process.env.REDIS_URL;

// // 2. Verifica se a vari√°vel foi encontrada.
// if (!redisUrl) {
//   // Se estivermos em produ√ß√£o e a URL n√£o existir, √© um erro cr√≠tico.
//   if (process.env.NODE_ENV === 'production') {
//     throw new Error('A vari√°vel de ambiente REDIS_URL n√£o est√° configurada!');
//   }
//   // Se n√£o estiver em produ√ß√£o, podemos alertar e usar um fallback para desenvolvimento local.
//   console.warn('‚ö†Ô∏è  Vari√°vel REDIS_URL n√£o encontrada. Usando conex√£o local com Redis.');
//   // Defina o fallback aqui, se necess√°rio, embora seja melhor definir no seu .env local.
//   // Para este caso, vamos deixar o ioredis usar o padr√£o 'localhost:6379'.
// }

// // 3. Cria a conex√£o. Se redisUrl for undefined, ioredis usa 'localhost'.
// // Se redisUrl tiver um valor (como na Railway), ele o usar√°.
// const redisConnection = new Redis(redisUrl, {
//   maxRetriesPerRequest: null,
//   // Esta op√ß√£o n√£o √© mais estritamente necess√°ria nas vers√µes mais recentes do ioredis.
//   // enableReadyCheck: false, 
// });

// redisConnection.on('connect', () => {
//   // Extrai o host para sabermos onde estamos conectados
//   const host = redisConnection.options.host || 'localhost';
//   console.log(`üîå Conectado ao Redis em ${host}`);
// });

// redisConnection.on('error', (err) => {
//   console.error('‚ùå Erro de conex√£o com o Redis:', err.message);
// });

// export default redisConnection;


// 2.0

// src/config/redis.js
// import Redis from 'ioredis';

// // A √∫nica fonte da verdade para a URL do Redis no deploy.
// const redisUrl = process.env.REDIS_URL;

// console.log(`--- Verifica√ß√£o da Conex√£o Redis ---`);
// if (redisUrl) {
//   console.log(`‚úÖ Vari√°vel de ambiente REDIS_URL foi ENCONTRADA.`);
// } else {
//   console.error(`‚ùå Vari√°vel de ambiente REDIS_URL N√ÉO FOI ENCONTRADA. A aplica√ß√£o tentar√° usar o localhost.`);
//   // Em um ambiente de produ√ß√£o, isso deveria causar um erro.
//   if (process.env.NODE_ENV === 'production') {
//     throw new Error('CONFIG ERROR: A vari√°vel de ambiente REDIS_URL n√£o foi encontrada no ambiente de produ√ß√£o.');
//   }
// }
// console.log(`------------------------------------`);


// const redisConnection = new Redis(redisUrl, {
//   // maxRetriesPerRequest: null √© importante para que o worker n√£o
//   // desista de se conectar se o Redis reiniciar brevemente.
//   maxRetriesPerRequest: null,
// });

// redisConnection.on('connect', () => {
//   // Para Railway, a conex√£o real pode n√£o ser localhost, ent√£o n√£o vamos logar o host aqui para evitar confus√£o.
//   console.log('üîå Conex√£o com o Redis sendo estabelecida...');
// });

// redisConnection.on('ready', () => {
//   console.log('‚úÖ Conex√£o com o Redis pronta para uso!');
// });

// redisConnection.on('error', (err) => {
//   console.error('‚ùå Erro de conex√£o com o Redis:', err.message);
// });

// export default redisConnection;

// 3.0

// src/config/redis.js
import Redis from 'ioredis';

const redisUrl = process.env.REDIS_URL;

if (!redisUrl) {
  if (process.env.NODE_ENV === 'production') {
    throw new Error('CONFIG ERROR: A vari√°vel de ambiente REDIS_URL n√£o foi encontrada.');
  }
}

// --- Conex√£o Padr√£o (que voc√™ pode usar para outras coisas) ---
// Adicionamos ?family=0 para resolver o problema de IPv6 na Railway
const connectionString = redisUrl ? `${redisUrl}?family=0` : undefined;

const redisConnection = new Redis(connectionString, {
  maxRetriesPerRequest: null,
});

// --- Objeto de Configura√ß√£o para o BullMQ ---
// Esta √© a forma mais robusta de passar a configura√ß√£o para as Queues e Workers
// Ele extrai as partes da URL e adiciona a op√ß√£o 'family: 0'
let bullmqConnectionConfig;
if (redisUrl) {
  const redisURL_obj = new URL(redisUrl);
  bullmqConnectionConfig = {
    host: redisURL_obj.hostname,
    port: Number(redisURL_obj.port),
    username: redisURL_obj.username,
    password: redisURL_obj.password,
    family: 0, // A CORRE√á√ÉO CR√çTICA
  };
} else {
  // Configura√ß√£o para ambiente local se a URL n√£o for definida
  bullmqConnectionConfig = {
    host: 'localhost',
    port: 6379,
  };
}


// Listeners de eventos para depura√ß√£o
redisConnection.on('connect', () => console.log('üîå Conex√£o principal com o Redis sendo estabelecida...'));
redisConnection.on('ready', () => console.log('‚úÖ Conex√£o principal com o Redis pronta para uso!'));
redisConnection.on('error', (err) => console.error('‚ùå Erro na conex√£o principal com o Redis:', err.message));

// Exportamos tanto a conex√£o principal quanto o objeto de configura√ß√£o do BullMQ
export default redisConnection;
export { bullmqConnectionConfig };